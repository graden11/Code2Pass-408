class Banker:
    def __init__(self, max_resources, allocated, available):
        self.max = [row.copy() for row in max_resources]
        self.allocated = [row.copy() for row in allocated]
        self.available = available.copy()
        self.n_processes = len(max_resources)
        self.n_resources = len(available)
        
        # 计算需求矩阵
        self.need = []
        for i in range(self.n_processes):
            self.need.append([self.max[i][j] - self.allocated[i][j] for j in range(self.n_resources)])
        
        # 验证数据合法性
        for i in range(self.n_processes):
            for j in range(self.n_resources):
                if self.need[i][j] < 0:
                    raise ValueError("错误：已分配资源超过最大需求")

    def is_safe(self):
        work = self.available.copy()
        finish = [False] * self.n_processes
        safe_sequence = []

        while True:
            found = False
            for i in range(self.n_processes):
                if not finish[i] and all(self.need[i][j] <= work[j] for j in range(self.n_resources)):
                    # 分配资源给进程i
                    for j in range(self.n_resources):
                        work[j] += self.allocated[i][j]
                    finish[i] = True
                    safe_sequence.append(i)
                    found = True
                    break
            
            if not found:
                break

        if all(finish):
            return True, safe_sequence
        else:
            return False, []

    def request_resources(self, process_id, request):
        # 输入验证
        if process_id < 0 or process_id >= self.n_processes:
            raise ValueError("无效的进程ID")
        
        if len(request) != self.n_resources:
            raise ValueError("请求资源数量不匹配")
        
        # 步骤1：检查请求是否超过需求
        if any(request[j] > self.need[process_id][j] for j in range(self.n_resources)):
            return False, "错误：请求超过进程需求"
        
        # 步骤2：检查请求是否超过可用资源
        if any(request[j] > self.available[j] for j in range(self.n_resources)):
            return False, "错误：请求超过系统可用资源"
        
        # 尝试分配资源
        old_available = self.available.copy()
        old_allocated = [row.copy() for row in self.allocated]
        old_need = [row.copy() for row in self.need]

        # 模拟分配
        for j in range(self.n_resources):
            self.available[j] -= request[j]
            self.allocated[process_id][j] += request[j]
            self.need[process_id][j] -= request[j]

        # 检查安全性
        is_safe, safe_sequence = self.is_safe()
        if is_safe:
            return True, safe_sequence
        else:
            # 回滚分配
            self.available = old_available
            self.allocated = old_allocated
            self.need = old_need
            return False, "拒绝：分配会导致系统不安全"

    def print_status(self):
        print("\n" + "="*50)
        print("当前系统状态：")
        print("进程\t最大需求\t已分配\t需求")
        for i in range(self.n_processes):
            print(f"P{i}\t{self.max[i]}\t{self.allocated[i]}\t{self.need[i]}")
        print("\n可用资源：", self.available)
        
        is_safe, seq = self.is_safe()
        if is_safe:
            print("系统处于安全状态，安全序列：", seq)
        else:
            print("警告：系统处于不安全状态！")
        print("="*50 + "\n")

# 示例用法
if __name__ == "__main__":
    # 示例数据（教科书经典案例）
    max_res = [
        [7, 5, 3],
        [3, 2, 2],
        [9, 0, 2],
        [2, 2, 2],
        [4, 3, 3]
    ]
    
    allocated = [
        [0, 1, 0],
        [2, 0, 0],
        [3, 0, 2],
        [2, 1, 1],
        [0, 0, 2]
    ]
    
    available = [3, 3, 2]
    
    banker = Banker(max_res, allocated, available)
    banker.print_status()
    
    # 示例请求1：P1请求 (1, 0, 2)
    print("\n>>> 处理请求：P1 请求 [1, 0, 2]")
    success, msg = banker.request_resources(1, [1, 0, 2])
    if success:
        print("请求批准，新的安全序列：", msg)
    else:
        print("请求拒绝：", msg)
    banker.print_status()
    
    # 示例请求2：P4请求 (3, 3, 0)
    print("\n>>> 处理请求：P4 请求 [3, 3, 0]")
    success, msg = banker.request_resources(4, [3, 3, 0])
    if success:
        print("请求批准，新的安全序列：", msg)
    else:
        print("请求拒绝：", msg)
    banker.print_status()
    
    # 示例请求3：P0请求 (0, 2, 0)
    print("\n>>> 处理请求：P0 请求 [0, 2, 0]")
    success, msg = banker.request_resources(0, [0, 2, 0])
    if success:
        print("请求批准，新的安全序列：", msg)
    else:
        print("请求拒绝：", msg)
    banker.print_status()
